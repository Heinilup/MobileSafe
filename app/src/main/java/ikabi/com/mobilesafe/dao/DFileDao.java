package ikabi.com.mobilesafe.dao;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import dao.Property;
import dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DFILE".
 */
public class DFileDao extends BaseDao<DFile, Long> {

    public static final String TABLENAME = "DFILE";


    /**
     * Properties of entity DFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property TaskId = new Property(2, String.class, "taskId", false, "TASK_ID");
        public final static Property Length = new Property(3, Long.class, "length", false, "LENGTH");
        public final static Property Position = new Property(4, Long.class, "position", false, "POSITION");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property IsSend = new Property(6, Boolean.class, "isSend", false, "IS_SEND");
        public final static Property Extension = new Property(7, String.class, "extension", false, "EXTENSION");
        public final static Property FullName = new Property(8, String.class, "fullName", false, "FULL_NAME");
        public final static Property From = new Property(9, String.class, "from", false, "FROM");
        public final static Property Percent = new Property(10, Long.class, "percent", false, "PERCENT");
        public final static Property Status = new Property(11, Integer.class, "status", false, "STATUS");
    }

    ;


    public DFileDao(DaoConfig config) {
        super(config);
    }

    public DFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DFILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TASK_ID\" TEXT," + // 2: taskId
                "\"LENGTH\" INTEGER," + // 3: length
                "\"POSITION\" INTEGER," + // 4: position
                "\"PATH\" TEXT," + // 5: path
                "\"IS_SEND\" INTEGER," + // 6: isSend
                "\"EXTENSION\" TEXT," + // 7: extension
                "\"FULL_NAME\" TEXT," + // 8: fullName
                "\"FROM\" TEXT," + // 9: from
                "\"PERCENT\" INTEGER," + // 10: percent
                "\"STATUS\" INTEGER NOT NULL );"); // 11: status
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DFILE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, DFile entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(3, taskId);
        }

        Long length = entity.getLength();
        if (length != null) {
            stmt.bindLong(4, length);
        }

        Long position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(5, position);
        }

        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }

        Boolean isSend = entity.getIsSend();
        if (isSend != null) {
            stmt.bindLong(7, isSend ? 1L : 0L);
        }

        String extension = entity.getExtension();
        if (extension != null) {
            stmt.bindString(8, extension);
        }

        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(9, fullName);
        }

        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(10, from);
        }

        Long percent = entity.getPercent();
        if (percent != null) {
            stmt.bindLong(11, percent);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public DFile readEntity(Cursor cursor, int offset) {
        DFile entity = new DFile( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskId
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // length
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // position
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isSend
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // extension
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fullName
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // from
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // percent
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // status
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, DFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLength(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPosition(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSend(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setExtension(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFullName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFrom(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPercent(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(DFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(DFile entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    public boolean updateTransferStatus(DFile dFile) {
        ContentValues values = new ContentValues();
        values.put(Properties.Percent.name, dFile.getPercent());
        values.put(Properties.Position.name, dFile.getPosition());
        values.put(Properties.Status.name, dFile.getStatus());
        String where = String.format("%s='%s'", Properties.TaskId.columnName, dFile.getTaskId());
        return update(TABLENAME, values, where, null) > 0 ? true : false;

    }

    public DFile getDFileByTaskId(String taskId) {
        List<DFile> list = queryBuilder().where(Properties.TaskId.eq(taskId)).list();
        if (list != null && list.size() > 0) {
            return list.get(0);
        }
        return null;
    }

    public void deleteByTaskId(String taskId) {
        String where = String.format("%s='%s'", Properties.TaskId.columnName, taskId);
        delete(TABLENAME, where, null);
    }

}
